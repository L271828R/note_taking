#!/usr/bin/env bash
#
# nnote_open.sh — Open a note by its list number **and** stamp last_visited in .note_map.json

set -euo pipefail

# ——— Configuration ———
NOTE_DIR="${NOTES_FOLDERS_PATH:-$HOME/projects/notes/folders}"
CURRENT_FILE="${NOTES_CURRENT_FILE:-$HOME/projects/notes/current}"
RESULTS_FILE="${NOTES_RESULTS_FILE:-$HOME/projects/notes/results.txt}"
MAP_FILE="${NOTES_PATH:-$HOME/projects/notes}/.note_map.json"

# ——— Helpers ———
error() {
  echo "Error: $*" >&2
  exit 1
}

# ——— 1. Determine current folder ———
[[ -f "$CURRENT_FILE" ]] || error "Current-file pointer not found at $CURRENT_FILE"
current="$(awk 'NF{print; exit}' "$CURRENT_FILE")"
[[ -n "$current" ]] || error "Could not read current folder from $CURRENT_FILE"

# ——— 2. Ensure results.txt exists ———
[[ -f "$RESULTS_FILE" ]] || error "Results file not found: $RESULTS_FILE (run nlist first)"

# ——— 3. Pick an entry number ———
arg="${1:-1}"
[[ "$arg" =~ ^[0-9]+$ ]] || error "Invalid entry number: '$arg'"

# ——— 4. Find corresponding filename ———
filename="$(awk -v num="$arg" '$1==num{print $2; exit}' "$RESULTS_FILE")"
[[ -n "$filename" ]] || error "No file #$arg in $RESULTS_FILE"

# ——— 5. Verify file exists ———
fullpath="$NOTE_DIR/$current/$filename"
[[ -f "$fullpath" ]] || error "Note not found: $fullpath"

# ——— 6. Open in Neovim ———
nvim "$fullpath"

# ——— 7. After quitting Neovim, update last_visited in .note_map.json ———
if [[ ! -f "$MAP_FILE" ]]; then
  echo "Warning: Map file not found at $MAP_FILE; skipping last_visited update" >&2
  exit 0
fi

# Compute the suffix we want to match against the stored .path
relpath="$current/$filename"

# Look for any .path that ends with this suffix
note_id="$(jq -r --arg suffix "$relpath" '
  to_entries
  | map(select(.value.path | endswith($suffix)))
  | .[0].key // empty
' "$MAP_FILE")"

if [[ -n "$note_id" ]]; then
  ts="$(date -u +"%Y-%m-%dT%H:%M:%SZ")"
  tmpfile="$(mktemp)"
  jq --arg id "$note_id" --arg t "$ts" '
    .[$id].last_visited = $t
  ' "$MAP_FILE" > "$tmpfile"
  mv "$tmpfile" "$MAP_FILE"
else
  echo "Warning: No map entry matching '*::$relpath'; skipping last_visited" >&2
fi

